/*
 * Markov Chain styel sheet
 */

@import url('http://spacewalk.simonwallner.at/app/css/base.css');
@import "bourbon/bourbon";
@import url(http://fonts.googleapis.com/css?family=Dosis:200,300,400,500,600,700,800);

/* some colors */
$orange: #e89f49;
$lime: #b6ce4e;
$turquoise: #5dd1a4;
$blue: #3fc0c9;
$lavender: #8885ed;
$rose: #c673d8;
$red: #e25454;


$bgColor: #333333;
$boxBGColor: #4d4d4d;
$labelColor: #787878;
$buttonColor: $blue;
$optionColor: $turquoise;

$barColor: #5B5B5B;
$invalidBarColor: #444444;
$invalidBarPos: $invalidBarColor;
$invalidBarNeg: $invalidBarColor;

$innerRadius: 3px;
$outerRadius: 5px;
$borderWidth: 5px;

$boxHeight: 85px;
$gutter: 4px;

$halfGutter: $gutter / 2;
$innerHeight: $boxHeight - 2 * $gutter;
$innerWidth: $innerHeight * 1.2;
$smallHeight: ($innerHeight - $gutter) / 2;
$smallWidth: ($innerWidth - $gutter) / 2;

$plotHeight: 150px;

// --- general rules ----------------------------------------------------------
body {
	background-color: $bgColor;
}

h1 {
	color: white;
	padding-left: 0.5em;
	padding-right: 0.5em;
	margin: 0px;

	position: relative;
	display: block;
	top: 50%;
	@include transform(translateY(-50%));
}

div {
	box-sizing: border-box;
}

a {
	&:link { color: inherit; text-decoration: inherit; }
	&:hover { color: inherit; text-decoration: inherit; }
	&:active { color: inherit; text-decoration: inherit; }
	&:visited { color: inherit; text-decoration: inherit; }
}

.box {
	background-color: $boxBGColor;
	display: block;
	float: left;
	border-radius: $outerRadius;
	height: $boxHeight;

	margin-left: $gutter;
	margin-bottom: $gutter;

	padding: $halfGutter;

	color: white;
	text-transform: uppercase;
	font-size: 14px;
}

.group, .label, .optionGroup, .option, .button, .statusGroup {
	float: left;
}

.label, .option, .button, .statusGroup {
	margin: $halfGutter;
}


.button, .label, .option, .indicator {
	border-radius: $innerRadius;
	height: $smallHeight;
	width: $smallWidth;
	font-weight: 200;
	letter-spacing: 0.12em;
	line-height: 1.2em;
	text-align: center;

	span {
		position: relative;
	 	top: 50%;
		display: block;
		@include transform(translateY(-50%));
	}
}

.button, .option {
	cursor: pointer;
	&:hover { border: 1px solid white; }
}

.option {
	background-color: mix($optionColor, $boxBGColor, 30);
	&:active { background-color: $optionColor; }

	&.active {
		background-color: $optionColor;
	}
}

.button {
	background-color: $buttonColor;
	&:active { background-color: darken($buttonColor, 10); }
}

.label {
	background-color: $labelColor;
}

.large {
	font-size: 1.3em;
}

.button.large, .label.large {
	height: $innerHeight;
	width: $innerWidth ;

	strong {
		font-size: 3.5em;
		font-weight: 300;
		display: block;
	}
}

.label.large {
	width: $innerWidth;
}

.label.wide {
	width: $innerWidth;
}
.label.extraWide {
	width: $innerWidth + $smallWidth + $gutter;
}
.label.fourWide {
	width: $innerWidth + 2 * $smallWidth + 2 * $gutter;
}


.statusGroup {
	background-color: $labelColor;
	border-radius: $innerRadius;
	.label {
		margin-top: 0px;
		margin-left: 0px;
		margin-right: 0px;
	}
}

.indicator {
	background-color: mix($lime, $boxBGColor, 30);
	margin: $gutter;
	margin-top: $halfGutter;
	width: $smallWidth - 2 * $gutter;
	height: $smallHeight - $gutter;
}

@include keyframes(fadeReady) {
	from {
		background-color: mix($lime, $boxBGColor, 30);
	}

	to {
		background-color: $lime;
	}
}

.indicator.ready {
	// background-color: $lime;
	@include animation(fadeReady 0.5s linear 1);
	@include animation-fill-mode(forwards);
}

@include keyframes(flash) {
	from {
		background-color: $red;
	}

	to {
		background-color: darken($red, 20);
	}
}

.button.danger {
	background-color: $lime;
	background-color: mix($red, $boxBGColor, 50);

	&:active { background-color: mix($red, $boxBGColor, 70); }

	&.armed {
		background-color: $red;
	}
	&.flashing {
		@include animation(flash 0.5s linear infinite);
	}
	&.safety {
		background-image: url('img/hatchies.svg');
		background-size: 300%;
		cursor: default;
		&:hover {
			border: none;
		}
	}
}

#plotBox {
	height: 3 * $plotHeight + 4 * $gutter;
}

div.verticalGroupLabel{
	background-color: $labelColor;
	border-radius: $innerRadius;
	font-size: 1.2em;
	letter-spacing: 0.12em;
	width: 1.5em;
	height: $plotHeight;
	float: left;
	margin: $halfGutter;

	span {
		transform-origin: 0% 0%;
		transform: rotate(90deg) translateY(-1.4em) translateX(0.4em);
		display: inline-block;
		white-space: nowrap;
	}
}

div.circularLabel {
	height: 600px;
}

#circularAnalog {
	height: 600px + 2 * $gutter;
}

div.plotArea, div.circularArea, div.linearArea {
	float: left;
	background-color: $bgColor;
	margin: $halfGutter;
	border-radius: $innerRadius;
	overflow: hidden;
}

div.plotArea {
	width: 800px;
	height: $plotHeight;
}


div.circularArea {
	width: 800px;
	height: 600px;
	padding: $gutter;
}

#matrixPlotLeft, #matrixPlotRight {
	width: 394px;
	display: inline-block;
}

div.linearArea {
	width: 800px;
	height: 150px;
	padding: 2 * $gutter;
}

.inline {
	display: inline-block;
}

.clear {
	clear: both;
	display: block;
	overflow: hidden;
	visibility: hidden;
	width: 0;
	height: 0;
}

#linearBox {
	height: 150px + 2 * $gutter;
}

div.linearLabel {
	padding-left: 1em;
	padding-right: 1em;
	padding-top: 0.5em;
	padding-bottom: 0.5em;
	margin-top: 0.5em;
	// background-color: $boxBGColor;
	display: inline-block;
	float: left;
	border-radius: $innerRadius;
	font-weight: 200;
	letter-spacing: 0.12em;
	line-height: 1.2em;
	text-align: center;
	width: 73px;
}

div.linearPlot {
	border: 1px solid white;
	border-radius: $innerRadius;
	display: inline-block;
	margin-bottom: 3 * $gutter;
}

div.linearP {
	display: inline-block;
	border: 1px solid white;
	height: 16.6px;
	border-radius: $innerRadius;
	margin: $halfGutter;
	margin-bottom: $gutter;
}

#rightLinear, #leftLinear {
	width: 392px;
	float: left;
}






// --- SVG stuff ---------------------------------------------------------------
svg {
	path {
		stroke: $bgColor;
		stroke-width: 3px;
	}

	.outline {
		stroke-width: 1px;
		stroke: white;
		fill: none;
	}
	rect.outline {
		shape-rendering: crispEdges;
	}

	path.glyph {
		stroke: $blue;
		marker-end: url(#markerArrowA);
		stroke-width: 2px;
	}
	path.glyphB {
		stroke: $orange;
		marker-end: url(#markerArrowB);
		stroke-width: 2px;
	}

	path.quiver {
		stroke: white;
		stroke-width: 1px;
		marker-end: url(#quiverArrow);
	}

	path.quiverB {
		stroke: $orange;
		stroke-width: 1px;
		marker-end: url(#quiverArrowB);
	}

	.barA, .barB {
		fill: $barColor;
		&.invalid {
			fill: $invalidBarColor;
		}
	}

	.diffPos {
		fill: $lime;
		&.invalid {
			fill: $invalidBarPos;
		}
	}

	.diffNeg {
		fill: $red;
		&.invalid {
			fill: $invalidBarNeg;
		}
	}

	.grid {
		.tick line {
			stroke: $barColor;
			stroke-width: 2px;
			opacity: 0.3;
		}

		g.tick text {
			opacity: 0;
		}
	}

	.labels {
		text {
			font-family: 'Dosis';
			font-size: 16px;
			fill: $barColor;
			text-anchor: end;

			&.ABLabel {
				font-size: 60px;
				opacity: 0.15;
				fill: white;
			}
		}
	}

	.hidden {
		opacity: 0;
	}
}

svg.matrix {
	// background-color: white;
	margin-right: 1px;
	path {
		stroke-width: 1.5px;
		&.anchor {
				stroke: $blue;
				stroke-location: inside;
		}
	}

	circle.outline {
		stroke-width: 0.5px;
	}
}
text.label {
	font-family: 'Dosis';
	font-size: 16px;
	fill: white;
}
